%prefix "vibe"

%header {
#include "../utils/ast.h"
#define YY_CTX_LOCAL 1
}

%source {
#include "../utils/log_utils.h"
}

%auxil "void*"

# Entry point rule
Program <- Spacing decl:Declarations EOF { $$ = decl; }

# Declarations are the top-level constructs in a VibeLang program
Declarations <- first:Declaration rest:DeclarationRest* {
    ast_node_t* program = create_ast_node(AST_PROGRAM);
    if (first) ast_add_child(program, first);
    for (int i = 0; i < rest.len; i++) {
        ast_node_t* decl = rest.list[i];
        if (decl) ast_add_child(program, decl);
    }
    $$ = program;
}

DeclarationRest <- Spacing d:Declaration { $$ = d; }

# A declaration can be a function, type definition, class, or import
Declaration <- FunctionDeclaration / TypeDeclaration / ClassDeclaration / ImportDeclaration

# Function declaration
FunctionDeclaration <- 
    "fn" Spacing name:Identifier Spacing "(" Spacing params:ParameterList? Spacing ")" Spacing ret:ReturnType? Spacing body:Block {
    ast_node_t* func = create_ast_node(AST_FUNCTION_DECL);
    ast_set_string(func, "name", name);
    if (params) ast_add_child(func, params);
    if (ret) ast_add_child(func, ret);
    if (body) {
        ast_node_t* func_body = create_ast_node(AST_FUNCTION_BODY);
        for (int i = 0; i < body->child_count; i++) {
            ast_add_child(func_body, body->children[i]);
        }
        ast_add_child(func, func_body);
    }
    $$ = func;
}

# Return type annotation
ReturnType <- "->" Spacing t:Type { $$ = t; }

# Parameter list in function declaration
ParameterList <- first:Parameter rest:ParameterRest* {
    ast_node_t* params = create_ast_node(AST_PARAM_LIST);
    ast_add_child(params, first);
    for (int i = 0; i < rest.len; i++) {
        ast_node_t* param = rest.list[i];
        ast_add_child(params, param);
    }
    $$ = params;
}

ParameterRest <- Spacing "," Spacing p:Parameter { $$ = p; }

# Individual parameter
Parameter <- name:Identifier Spacing ":" Spacing t:Type {
    ast_node_t* param = create_ast_node(AST_PARAMETER);
    ast_set_string(param, "name", name);
    ast_add_child(param, t);
    $$ = param;
}

# Type declaration
TypeDeclaration <- 
    "type" Spacing name:Identifier Spacing "=" Spacing t:Type Spacing ";" {
    ast_node_t* type_decl = create_ast_node(AST_TYPE_DECL);
    ast_set_string(type_decl, "name", name);
    ast_add_child(type_decl, t);
    $$ = type_decl;
}

# Type specification
Type <- MeaningType / BasicType

# Basic type
BasicType <- name:Identifier {
    ast_node_t* type = create_ast_node(AST_BASIC_TYPE);
    ast_set_string(type, "type", name);
    $$ = type;
}

# Meaning type
MeaningType <- 
    "Meaning" Spacing "<" Spacing base:Type Spacing ">" Spacing "(" Spacing meaning:StringLiteral Spacing ")" {
    ast_node_t* type = create_ast_node(AST_MEANING_TYPE);
    ast_set_string(type, "meaning", meaning);
    ast_add_child(type, base);
    $$ = type;
}

# Class declaration
ClassDeclaration <- 
    "class" Spacing name:Identifier Spacing "{" Spacing members:ClassMember* Spacing "}" {
    ast_node_t* class = create_ast_node(AST_CLASS_DECL);
    ast_set_string(class, "name", name);
    for (int i = 0; i < members.len; i++) {
        ast_node_t* member = members.list[i];
        ast_add_child(class, member);
    }
    $$ = class;
}

# Class member - can be a variable or method
ClassMember <- MemberVariable / FunctionDeclaration

# Class member variable
MemberVariable <- 
    name:Identifier Spacing ":" Spacing t:Type Spacing ";" {
    ast_node_t* var = create_ast_node(AST_MEMBER_VAR);
    ast_set_string(var, "name", name);
    ast_add_child(var, t);
    $$ = var;
}

# Import declaration
ImportDeclaration <- 
    "import" Spacing path:StringLiteral Spacing ";" {
    ast_node_t* import = create_ast_node(AST_IMPORT);
    ast_set_string(import, "path", path);
    $$ = import;
}

# Block of code with statements
Block <- "{" Spacing stmts:Statement* Spacing "}" {
    ast_node_t* block = create_ast_node(AST_BLOCK);
    for (int i = 0; i < stmts.len; i++) {
        ast_node_t* stmt = stmts.list[i];
        if (stmt) ast_add_child(block, stmt);
    }
    $$ = block;
}

# Statement types
Statement <- 
      VariableDeclaration
    / ReturnStatement
    / PromptStatement
    / ExpressionStatement
    / Block

# Variable declaration
VariableDeclaration <- 
    "let" Spacing name:Identifier Spacing type_annot:TypeAnnotation? Spacing "=" Spacing expr:Expression Spacing ";" {
    ast_node_t* var = create_ast_node(AST_VAR_DECL);
    ast_set_string(var, "name", name);
    if (type_annot) ast_add_child(var, type_annot);
    ast_add_child(var, expr);
    $$ = var;
}

# Type annotation for variables
TypeAnnotation <- ":" Spacing t:Type { $$ = t; }

# Return statement
ReturnStatement <- 
    "return" Spacing expr:Expression? Spacing ";" {
    ast_node_t* ret = create_ast_node(AST_RETURN_STMT);
    if (expr) ast_add_child(ret, expr);
    $$ = ret;
}

# Prompt statement
PromptStatement <- 
    "prompt" Spacing template:StringLiteral Spacing ";" {
    ast_node_t* prompt = create_ast_node(AST_PROMPT_BLOCK);
    ast_set_string(prompt, "template", template);
    $$ = prompt;
}

# Expression statement
ExpressionStatement <- expr:Expression Spacing ";" {
    ast_node_t* stmt = create_ast_node(AST_EXPR_STMT);
    ast_add_child(stmt, expr);
    $$ = stmt;
}

# Expression types
Expression <- CallExpression / Literal / Identifier

# Function call expression
CallExpression <- 
    func:Identifier Spacing "(" Spacing args:ArgumentList? Spacing ")" {
    ast_node_t* call = create_ast_node(AST_CALL_EXPR);
    ast_set_string(call, "function", func);
    if (args) {
        for (int i = 0; i < args->child_count; i++) {
            ast_add_child(call, args->children[i]);
        }
    }
    $$ = call;
}

# Function call argument list
ArgumentList <- first:Expression rest:ArgumentRest* {
    ast_node_t* args = create_ast_node(AST_ARG_LIST);
    ast_add_child(args, first);
    for (int i = 0; i < rest.len; i++) {
        ast_node_t* arg = rest.list[i];
        ast_add_child(args, arg);
    }
    $$ = args;
}

ArgumentRest <- Spacing "," Spacing e:Expression { $$ = e; }

# Literal values
StringLiteral <- '"' val:( [^"]* ) '"' {
    char* str = strndup(val, val_end - val);
    ast_node_t* node = create_ast_node(AST_STRING_LITERAL);
    ast_set_string(node, "value", str);
    free(str);
    $$ = node;
}

IntLiteral <- [0-9]+ {
    ast_node_t* node = create_ast_node(AST_INT_LITERAL);
    ast_set_int(node, "value", strtoll(text(auxil), NULL, 10));
    $$ = node;
}

FloatLiteral <- [0-9]+ '.' [0-9]+ {
    ast_node_t* node = create_ast_node(AST_FLOAT_LITERAL);
    ast_set_float(node, "value", atof(text(auxil)));
    $$ = node;
}

BoolLiteral <- ("true" / "false") {
    ast_node_t* node = create_ast_node(AST_BOOL_LITERAL);
    ast_set_bool(node, "value", strcmp(text(auxil), "true") == 0);
    $$ = node;
}

Literal <- StringLiteral / IntLiteral / FloatLiteral / BoolLiteral

# Identifier
Identifier <- [a-zA-Z_][a-zA-Z0-9_]* {
    ast_node_t* node = create_ast_node(AST_IDENTIFIER);
    ast_set_string(node, "name", text(auxil));
    $$ = node;
}

# Whitespace and comments
Spacing <- ([\t\n\r ] / Comment)*
Comment <- "//" (![\n] .)* [\n]
EOF <- !.