%prefix "vibe"

%header {
    #include <stdlib.h>
    #include <string.h>
    #include <stdio.h>
    #include "../utils/ast.h"
}

%source {
    #include "../utils/ast.h"
    #include "../utils/log_utils.h"
}

%value "ast_node_t*"

Program <- Spacing Declaration* EOF {
    $$ = create_ast_node(AST_PROGRAM);
    for (int i = 0; i < $2.len; i++) {
        ast_add_child($$, $2.list[i]);
    }
}

Declaration <- ImportDecl / TypeDecl / FunctionDecl / ClassDecl

ImportDecl <- "import" Spacing StringLiteral Spacing ";" Spacing {
    $$ = create_ast_node(AST_IMPORT);
    ast_set_string($$, "path", $3->str_val);
    ast_node_free($3);
}

TypeDecl <- "type" Spacing Identifier Spacing "=" Spacing TypeExpression Spacing ";" Spacing {
    $$ = create_ast_node(AST_TYPE_DECL);
    ast_set_string($$, "name", $3->str_val);
    ast_add_child($$, $7);
    ast_node_free($3);
}

TypeExpression <- MeaningType / BasicType

MeaningType <- "Meaning" Spacing "<" Spacing BasicType Spacing ">" Spacing "(" Spacing StringLiteral Spacing ")" {
    $$ = create_ast_node(AST_MEANING_TYPE);
    ast_add_child($$, $5);
    ast_set_string($$, "meaning", $11->str_val);
    ast_node_free($11);
}

BasicType <- "Int" / "Float" / "String" / "Bool" / Identifier {
    $$ = create_ast_node(AST_BASIC_TYPE);
    ast_set_string($$, "type", $0.text);
}

FunctionDecl <- "fn" Spacing Identifier Spacing "(" Spacing ParamList? Spacing ")" Spacing
                ("->" Spacing TypeExpression Spacing)? FunctionBody Spacing {
    $$ = create_ast_node(AST_FUNCTION_DECL);
    ast_set_string($$, "name", $3->str_val);
    ast_node_free($3);
    
    if ($7.len > 0) {
        ast_node_t *params = create_ast_node(AST_PARAM_LIST);
        for (int i = 0; i < $7.len; i++) {
            ast_add_child(params, $7.list[i]);
        }
        ast_add_child($$, params);
    }
    
    if ($13 != NULL) {
        ast_add_child($$, $13);
    }
    
    ast_add_child($$, $15);
}

ParamList <- Parameter ("," Spacing Parameter)* {
    $$.list = malloc(sizeof(ast_node_t*) * (1 + $2.len));
    $$.list[0] = $1;
    $$.len = 1;
    
    for (int i = 0; i < $2.len; i++) {
        $$.list[$$.len++] = $2.list[i];
    }
}

Parameter <- Identifier Spacing ":" Spacing TypeExpression {
    $$ = create_ast_node(AST_PARAMETER);
    ast_set_string($$, "name", $1->str_val);
    ast_add_child($$, $5);
    ast_node_free($1);
}

FunctionBody <- "{" Spacing Statement* PromptBlock? Spacing "}" {
    $$ = create_ast_node(AST_FUNCTION_BODY);
    
    for (int i = 0; i < $3.len; i++) {
        ast_add_child($$, $3.list[i]);
    }
    
    if ($4 != NULL) {
        ast_add_child($$, $4);
    }
}

PromptBlock <- "prompt" Spacing StringLiteral Spacing {
    $$ = create_ast_node(AST_PROMPT_BLOCK);
    ast_set_string($$, "template", $3->str_val);
    ast_node_free($3);
}

ClassDecl <- "class" Spacing Identifier Spacing "{" Spacing (ClassMember Spacing)* "}" Spacing {
    $$ = create_ast_node(AST_CLASS_DECL);
    ast_set_string($$, "name", $3->str_val);
    ast_node_free($3);
    
    for (int i = 0; i < $7.len; i++) {
        ast_add_child($$, $7.list[i]);
    }
}

ClassMember <- MemberVar / MethodDecl

MemberVar <- Identifier Spacing ":" Spacing TypeExpression Spacing ";" {
    $$ = create_ast_node(AST_MEMBER_VAR);
    ast_set_string($$, "name", $1->str_val);
    ast_add_child($$, $5);
    ast_node_free($1);
}

MethodDecl <- FunctionDecl

Statement <- VarDecl / ExprStmt / ReturnStmt / Block

VarDecl <- "let" Spacing Identifier Spacing (":" Spacing TypeExpression Spacing)? "=" Spacing Expression Spacing ";" {
    $$ = create_ast_node(AST_VAR_DECL);
    ast_set_string($$, "name", $3->str_val);
    ast_node_free($3);
    
    if ($5 != NULL) {
        ast_add_child($$, $7);
    }
    
    ast_add_child($$, $11);
}

ExprStmt <- Expression Spacing ";" {
    $$ = create_ast_node(AST_EXPR_STMT);
    ast_add_child($$, $1);
}

ReturnStmt <- "return" Spacing Expression? Spacing ";" {
    $$ = create_ast_node(AST_RETURN_STMT);
    if ($3 != NULL) {
        ast_add_child($$, $3);
    }
}

Block <- "{" Spacing Statement* Spacing "}" {
    $$ = create_ast_node(AST_BLOCK);
    for (int i = 0; i < $3.len; i++) {
        ast_add_child($$, $3.list[i]);
    }
}

Expression <- LiteralExpr / CallExpr / Identifier {
    if ($0.token == 3) { // Identifier
        $$ = create_ast_node(AST_IDENTIFIER);
        ast_set_string($$, "name", $0.text);
    } else {
        $$ = $0.node;
    }
}

LiteralExpr <- IntLiteral / FloatLiteral / StringLiteral / BoolLiteral

IntLiteral <- [0-9]+ {
    $$ = create_ast_node(AST_INT_LITERAL);
    ast_set_int($$, "value", atoll($0.text));
}

FloatLiteral <- [0-9]+ "." [0-9]+ {
    $$ = create_ast_node(AST_FLOAT_LITERAL);
    ast_set_float($$, "value", atof($0.text));
}

StringLiteral <- '"' (!'"' .)* '"' {
    $$ = create_ast_node(AST_STRING_LITERAL);
    
    // Extract string without quotes
    size_t len = $0.len - 2;
    char* str = malloc(len + 1);
    memcpy(str, $0.text + 1, len);
    str[len] = '\0';
    
    ast_set_string($$, "value", str);
    free(str);
}

BoolLiteral <- "true" / "false" {
    $$ = create_ast_node(AST_BOOL_LITERAL);
    ast_set_bool($$, "value", strcmp($0.text, "true") == 0);
}

CallExpr <- Identifier Spacing "(" Spacing ArgList? Spacing ")" {
    $$ = create_ast_node(AST_CALL_EXPR);
    ast_set_string($$, "function", $1->str_val);
    ast_node_free($1);
    
    if ($5.len > 0) {
        for (int i = 0; i < $5.len; i++) {
            ast_add_child($$, $5.list[i]);
        }
        free($5.list);
    }
}

ArgList <- Expression ("," Spacing Expression)* {
    $$.list = malloc(sizeof(ast_node_t*) * (1 + $2.len));
    $$.list[0] = $1;
    $$.len = 1;
    
    for (int i = 0; i < $2.len; i++) {
        $$.list[$$.len++] = $2.list[i];
    }
}

Identifier <- [a-zA-Z_] [a-zA-Z0-9_]* {
    $$ = create_ast_node(AST_IDENTIFIER);
    ast_set_string($$, "value", $0.text);
}

Spacing <- ([ \t\r\n] / Comment)*

Comment <- "//" (![\r\n] .)* [\r\n]

EOF <- !.
